[parserRules]
; These rules are used by the INI Parser to parse this configuration file. You can modify these rules if necessary before parsing the configuration below.

; By default, this rule splits strings by commas to create arrays in a JavaScript object.
; If you need to use commas within a string, adjust this rule and replace commas with variables below to prevent crashes.
; Example: [exampleArray = string, string_2, string_3] → change to [splitBy = |] → then [exampleArray = string|string_2|string_3]
splitBy = ,

; If enabled, the parser will recognize strings like ${text} as commands to execute.
; For example, [exampleCommand = ${new Date()}] will return exampleCommand with the current date as value in the JavaScript object.
bracketCommands = false

[server]
HTTPPort = 80
HTTPSPort = 8443
host = localhost
localTunnel = nkardaz

wiki.type = Node Wiki
wiki.version = 0.1.0
wiki.project = Ashihara Wiki
wiki.core = NodeJS Express
wiki.logo = /shared/images/ashihara.svg
wiki.logoBackground = #282828

[NGINX]
enabled = true
; The following options are used in the nginx.conf generation located at ./Tools/nginx/
; Nginx is used as a reverse proxy for Node.js.
; You can copy the generated configuration to your /etc/nginx/conf/ if you want to use it. Otherwise, change the [server] HTTPSPort to 443.
; Or you can modify generation template at ./Tools/nginx/node-wiki-nginx.js.
; Don't forget copy /Tools/nginx/html/ forlder to you nginx destination.
HTTPSPort = 443

; Recommended save it true
HTTP2 = true

; “proxyCache” enables caching of responses to requests. However, it might be unsuitable for dynamic content or frequently changing data.
; If you don't plan to make frequent changes and users cannot modify the content of the pages, you can enable this.
proxyCache = false

; “proxyCacheValid” is set to 10m by default, which equals 10 minutes.
proxyCacheValid = 10m
proxyCacheMinUses = 5

; Upstreams if you want to configure running app as multi-proccesses without PM2/another “clustering tool”.

; upstream.server1 = localhost:3000 weight=3
; upstream.server2 = localhost:3001
; upstream.server3 = localhost:3002
; upstream.server4 = localhost:3003

; The build script will automatically detect your operating system and apply the following options to the nginx.conf file.
linux.workerProcesses = auto
linux.workerRlimitNofile = {math}: 8192 * 2 * 2
linux.accessLog = /var/log/nginx/access.log
linux.errorLog = /var/log/nginx/error.log

macos.workerProcesses = auto
macos.workerRlimitNofile = {math}: 8192 * 2 * 2
macos.accessLog = /var/log/nginx/access.log
macos.errorLog = /var/log/nginx/error.log

; Paths of logs for windows can't be absolute or use {this}… At least for me, it only caused errors.
win.workerProcesses = 2
win.accessLog = logs/access.log
win.errorLog = logs/error.log

workerConnections = 8192
multiAccept = on

limits.requests = 5000r/m
limits.requestsBurst = 1000
limits.requestsDelay = 5

limits.connectionsPerIP = 50

gzip.level = 4
gzip.minLength = 100


; Option to generate some error pages for Nginx. You can configure the template at */modules/GenerateConfigs/src/errors.ejs.
; The errors array can be changed in */modules/GenerateConfigs/src/node-wiki-nginx.js.
errorPages = true

; [NGINX-EXTRA]
; This commented options requires nginx compilation with additional parameters, make it before enablind following options.
; HTTP3 = true ; Compile nginx with --with-http_v3_module required | Turn off HTTP2 option.


; The path to save the generated nginx.conf is set to “this” server folder by default.
pathToSave = {this}/Tools/nginx/nginx.conf

[pm2]
enabled = true

; Limits the number of instances that can be started at the same time.
; Can’be highest than CPU count.
maxInstances = 6

; When enabled, uses nodemon for watching changes to rebuild the server. Eats one instance slot.
rebuildOnChanges = true

[php]
; This section is required if you want to use phpMyAdmin for your MySQL database.
; It generates php.ini with some parameters.
enabled = true

; The path to save the generated php.ini is set to “this” server folder by default.
pathToSave = {this}/Tools/php.ini

[dataBase]
host = localhost
port = 3306
; Postgres 5432
user = admin
password = admin

[cache]
; If set to “false”, existing cache will not be automatically cleaned.
enabled = true

; The parameter “cacheCleaningFrequency” determines how often cache cleaning occurs.
; You can use the following time units: w — weeks, d — days, h — hours, s — seconds.
; The maximum value for frequency is 24 days or 3 weeks.
; Longer times may cause a [TimeoutOverflowWarning: does not fit into a 32-bit signed intege] error.
; This setting deletes cache files older than “maxCacheAge”; the minimum value is 1 day.
; The age of cached file updates every when requested.
cacheCleaningFrequency = 1w
maxCacheAge = 7d

; You can use the following size units: K — kilobytes, M — megabytes, G — gigabytes, T — terabytes.
maxImagesCache = 1G
maxMediaCache = 2G
maxOtherCache = 128M

maxCachedImageSize = 1024K
maxCachedVideoSize = 50M
maxCachedOtherSize = 128K

[modules]
; The “useSrc” parameter determines which module/extension *.js files will be used.
; If “true” the */MODULE_NAME/src/MODULE_NAME.js file is used — an uncompressed development version of the module/extension.
; If “false” */MODULE_NAME/MODULE_NAME.js file is used — a version that has been compressed with Terser and minified.
; This is not affects “Core Modules” placed in the “modules” folder.
useSrc = true
modulesFolder = modules
extensionsFolder = extensions

[styles]
fileSet = index, errors, akatsukikurai, byakujou, sekiban, aogurogetsu

[files]
maxFileSize = 1G

[allowedFileTypes]
images = .jpg, .jpeg, .png, .apng, .gif, .webp, .ico, .svg, .avif, .bmp
media = .mp4, .mkv, .webm, .ogv, .avi, .mov, .wmv, .mpg, .mpeg, .m4v, .3gp, .3g2, .mng, .asf, .asx, .mxf, .ts, .flv, .f4v, .f4p, .f4a, .f4b, .mp3, .wav, .flac
documents = .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .txt, .rtf, .odt
archives = .zip, .rar, .7z, .tar, .gz
web = .html, .css, .js, .json, .xml, .ejs, .md, .pug, .scss, .sass
models = .obj, .fbx, .stl, .dae
fonts = .ttf, .otf, .woff, .woff2

[language]
default = ru
supported = ru, en, ja, zh, ko, vi, mo, ro

isoCodes = aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, io, is, it, iu, ja, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu

customCodes = tangut, khitan

[locales]
; Here you can set additional localization files in YAML or JSON format.
; File names for specific languages must contain three splitted by dot elements, e.g., main.ru.yaml: “someword” + language + extension.
; Examples of true: main.ru.yaml, some-file_name=language@file.en.yaml
; Note: if language does not exists in [supported] of section [language], file will be ignored.
; File names that contain keys for multiple languages must contain two elements, e.g., misc.yaml: “someword” + extension.
; Locale files must be stored in */assets/locale/.

; All locales merges into one server variable [locale].
locale-asset-common = asset.common.yaml
locale-asset-templates = asset.templates.yaml
locale-ru = main.ru.yaml
locale-en = main.en.yaml
locale-ja = main.ja.yaml
locale-zh = main.zh.yaml
locale-ko = main.ko.yaml
locale-vi = main.vi.yaml
locale-mo = main.mo.yaml
locale-ro = main.ro.yaml
locale-misc = misc.yaml
locale-meta = metainfo.yaml

locale-ru-license = license.ru.yaml
locale-en-license = license.en.yaml
locale-ja-license = license.ja.yaml
locale-zh-license = license.zh.yaml
locale-ko-license = license.ko.yaml
locale-vi-license = license.vi.yaml
locale-mo-license = license.mo.yaml
locale-ro-license = license.ro.yaml

[routes]
; The “useThirdLevelDomains” parameter determines the localized route style.
; If “true”, you can use routes like "https://en.example.com/wiki/"
; If ”false”, the locale routes will be like "https://example.com/en/wiki/"
; The language route variable is urlLanguageRequest in request objects, i.e., req.urlLanguageRequest when using app.get(…, (req, res))
useThirdLevelDomains = true

validFilesQuery = {regex}: ^(File|Файл|ファイル|文件|파일|Tệp)(:|：)
validCatsQuery = {regex}: ^(Category|Категория|カテゴリー|分类|분류|Thể_loại)(:|：)