const fs=require("fs"),yaml=require("js-yaml"),path=require("path"),chokidar=require("chokidar"),config=file=>{let methods={};const projectDirectory=path.join(__dirname,"..",".."),configPath=path.join(projectDirectory,`${file||"core-config"}.yaml`);let configFile=null,previousInit=[];return methods.reloadConfigFile=()=>yaml.load(fs.readFileSync(configPath,"utf8")),methods.handle=async(dependency,isNotRequire)=>{let key=Object.keys(dependency)[0],value=dependency[key];if(key=key.startsWith("./")?path.join(projectDirectory,key):key,isNotRequire)global[key]=eval(value),previousInit.push(key);else if(value.startsWith("{")&&value.endsWith("}")){value=value.substring(1,value.length-1);let e=value.split(",").map((e=>e.trim())),o=require(key);e.forEach((e=>{o.hasOwnProperty(e)?(global[e]=o[e],previousInit.push(e)):console.error(`Variable '${e}' not found in module '${key}'.`)}))}else global[value]=require(key),previousInit.push(value)},methods.watch=e=>{chokidar.watch(configPath).on("change",(async()=>{console.log(`[35m[${(new Date).toLocaleString().replace(",","")}] :: ðŸŸ§ > [CONFIG] :: Configuration file [${configPath.split("\\").pop()}] has been changed[39m`);try{previousInit.forEach((e=>global[e]&&delete global[e])),previousInit=[],await methods.init(e,!1),console.log(`[35m[${(new Date).toLocaleString().replace(",","")}] :: ðŸŸ§ > [CONFIG] :: Configuration reloaded successfully[39m`)}catch(e){console.error(`Error reloading configuration: ${e}`)}}))},methods.init=async(e,o=!0)=>{const i=new Promise(((o,i)=>{try{if(configFile=methods.reloadConfigFile(),null!==e&&Array.isArray(e))for(let o=0;o<e.length;o++){let i="Vars"===configFile[e[o]][0];i&&configFile[e[o]].shift(),Object.values(configFile[e[o]]).forEach((async e=>await methods.handle(e,i)))}else Object.values(configFile).forEach((e=>{let o="Vars"===e[0];o&&e.shift(),Object.values(e).forEach((async e=>await methods.handle(e,o)))}))}catch(e){console.error(e),i(e)}o()}));Promise.all([i]).then((()=>{o&&methods.watch(e)}))},methods};module.exports={config:config};