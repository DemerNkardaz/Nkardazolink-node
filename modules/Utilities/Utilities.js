const fs=require("fs"),path=require("path"),sass=require("sass");function mergeObjects(...s){try{const e={};for(const r of s)Object.assign(e,r);return e}catch(s){console.error("Error merging objects:",s)}}async function varToYaml(s,e){const r=yaml.dump(e),t=`test/${s}.yaml`;try{fs.writeFileSync(t,r,"utf8"),console.log(`Variable saved as YAML in ${t}`)}catch(s){console.error("Error saving variable as YAML:",s)}}async function getLastModifiedInFolders(){try{const s=["./","./app","./static"],e=await Promise.all(s.map((async s=>{const e=await fs.promises.readdir(s),r=await Promise.all(e.map((async e=>{const r=path.join(s,e);return(await fs.promises.stat(r)).mtime})));return Math.max(...r)})));return Math.max(...e)}catch(s){throw console.error("Ошибка при получении даты последнего обновления:",s),s}}async function parseUrl(s){try{const e=s.protocol,r=`${e}://${s.get("host")}${s.url}`,t=new URL(r).searchParams,o={};for(const[s,e]of t.entries())o[s]=e;return 0===Object.keys(o).length?null:o}catch(s){return console.error(s),null}}Array.prototype.mergeObjects=function(){return mergeObjects(...this)};const urlSpaceToUnderscore=(s,e,r)=>{let t=decodeURIComponent(s.url);s.originalUrl=s.url,s.url=encodeURI(t.replace(/\s/g,"_")),r()},liveSassCompiler=(s,e,r)=>{const t=path.join(__dirname,"..","..","..");if(s.url.endsWith(".css")){e.setHeader("Content-Type","text/css");const o=path.join(t,"app","styles",s.url.replace(".css",".scss"));if(fs.existsSync(o)){const s=sass.compile(o,{style:"compressed"}),r=new Readable;r._read=()=>{},r.push(s.css),r.push(null),r.pipe(e)}else{const o=path.join(t,"app","styles","skins",s.url.replace(".css",".scss"));if(fs.existsSync(o)){const s=spawn("node",["-e",`\n                    const sass = require('sass');\n                    const fs = require('fs');\n                    const scssFilePath = '${o}';\n                    const result = sass.compile(scssFilePath, { style: 'compressed' });\n                    process.stdout.write(result.css);\n                `]);s.stdout.on("data",(s=>{e.write(s)})),s.on("close",(s=>{e.end()})),s.stderr.on("data",(s=>{console.error(`Ошибка: ${s}`),e.status(500).send("Ошибка компиляции SCSS")}))}else r()}}else r()};module.exports={mergeObjects:mergeObjects,varToYaml:varToYaml,getLastModifiedInFolders:getLastModifiedInFolders,parseUrl:parseUrl,urlSpaceToUnderscore:urlSpaceToUnderscore,liveSassCompiler:liveSassCompiler};