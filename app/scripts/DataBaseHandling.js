function dbHandle(e){const t=new sqlite3.Database(e);console.log(`Connected to the SQLite database at ${e}`);const createTableIfNotExists=e=>new Promise(((n,r)=>{const a=`CREATE TABLE IF NOT EXISTS ${e} (key TEXT PRIMARY KEY, value TEXT)`;t.run(a,(e=>{e?r(e):n()}))}));return{get:async(e,n)=>{try{await createTableIfNotExists(e);const r=`SELECT value FROM ${e} WHERE key = ?`;return new Promise(((a,o)=>{t.get(r,[n],((t,r)=>{t?o(t):a(r?r.value:`Key "${n}" not found in table "${e}"`)}))}))}catch(t){return`Error retrieving from table "${e}": ${t.message}`}},set:async(e,n,r)=>{try{await createTableIfNotExists(e);const a=`INSERT OR REPLACE INTO ${e} (key, value) VALUES (?, ?)`;return new Promise(((o,s)=>{t.run(a,[n,r],(t=>{t?s(t):o(`Value set for key "${n}" in table "${e}"`)}))}))}catch(t){return`Error setting value in table "${e}": ${t.message}`}},remove:async(e,n)=>{try{await createTableIfNotExists(e);const r=`DELETE FROM ${e} WHERE key = ?`;return new Promise(((a,o)=>{t.run(r,[n],(function(t){t?o(t):0===this.changes?a(`Key "${n}"not found in table "${e}"`):a(`Key "${n}" removed from table "${e}"`)}))}))}catch(t){return`Error removing from table "${e}": ${t.message}`}}}}module.exports={dbHandle:dbHandle};