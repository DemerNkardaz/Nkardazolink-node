require("dotenv").config(),require("./nk.config.js").config().init(),console.log(`[35m[${(new Date).toLocaleString().replace(",","")}] :: üü™ > [SERVER] :: Server started[39m`);const readFileAsync=promisify(fs.readFile);app.use(compression()),app.use(express.static(path.join(__PROJECT_DIR__,"public"))),app.use(express.urlencoded({extended:!1})),app.use(cookieParser()),app.use(express.json()),app.set("view engine","ejs"),app.set("views",path.join(__PROJECT_DIR__,"app")),(async()=>{const e=dbHandle("./data_base/index.db");try{const s=await e.set("TestingTable","TestingKey","TestingValue");console.log(s);const a=await e.get("TestingTable","TestingKey");console.log(a);const t=await e.remove("TestingTable","TestingKey");console.log(t);const o=await e.get("TestingTable","TestingKey");console.log(o)}catch(e){console.error(e)}})(),app.use(((e,s,a)=>{if(e.url.endsWith(".css")){s.setHeader("Content-Type","text/css");const t=path.join(__dirname,"app","styles",e.url.replace(".css",".scss"));if(fs.existsSync(t)){const e=sass.compile(t,{style:"compressed"}),a=new Readable;a._read=()=>{},a.push(e.css),a.push(null),a.pipe(s)}else{const t=path.join(__dirname,"app","styles","skins",e.url.replace(".css",".scss"));if(fs.existsSync(t)){const e=spawn("node",["-e",`\n                    const sass = require('sass');\n                    const fs = require('fs');\n                    const scssFilePath = '${t}';\n                    const result = sass.compile(scssFilePath, { style: 'compressed' });\n                    process.stdout.write(result.css);\n                `]);e.stdout.on("data",(e=>{s.write(e)})),e.on("close",(e=>{s.end()})),e.stderr.on("data",(e=>{console.error(`–û—à–∏–±–∫–∞: ${e}`),s.status(500).send("–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ SCSS")}))}else a()}}else a()}));const dataArray=[];function generateUserId(e){const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let a="";for(let t=0;t<e;t++){const e=Math.floor(62*Math.random());a+=s.charAt(e)}return a}async function getLastModifiedInFolders(){try{const e=["./","./app","./public"],s=await Promise.all(e.map((async e=>{const s=await fs.promises.readdir(e),a=await Promise.all(s.map((async s=>{const a=path.join(e,s);return(await fs.promises.stat(a)).mtime})));return Math.max(...a)})));return Math.max(...s)}catch(e){throw console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",e),e}}__NK__.langs.supported.forEach((e=>{dataArray.push({source:`./public/data/locale/common/main.${e}.yaml`,as:`locale.${e}`})})),dataArray.push({source:"./public/data/locale/common/asset.common.yaml",as:"locale.common"}),dataArray.push({source:"./public/data/locale/common/asset.templates.yaml",as:"locale.templates"}),DataExtend(dataArray,__PROJECT_DIR__).then((()=>console.log(`[32m[${(new Date).toLocaleString().replace(",","")}] :: üü© > [DATA-EXTEND] :: Extension of data completed[39m`))).catch((e=>console.error(`[${(new Date).toLocaleString().replace(",","")}] :: üü• > [DATA-EXTEND] :: Error extending data: ${e.message}`))),app.use(((e,s,a)=>{s.setHeader("X-Content-Type-Options","nosniff"),s.setHeader("Content-Type","text/html; charset=utf-8"),a()})),app.get("/",(async(e,s)=>{try{console.log(new Date(await getLastModifiedInFolders()).toLocaleString());const a={};for(const s in e.cookies)for(const t of VALID_COOKIES)if(s.startsWith(t)){const t=s.split(".")[0],o=e.cookies[s];a[t]=a[t]||{},a[t][s.substring(t.length+1)]=o}console.log(a),console.log(e.headers["accept-language"]);const t={...a,request:e,userURL:e.url,fullURL:`${e.protocol}://${e.get("host")}${e.url}`,domainURL:`${e.protocol}://${e.get("host")}`,userDevice:os.platform(),navigatorLanguage:e.headers["accept-language"],urlModes:await async function parseUrl(){try{const s=e.protocol,a=`${s}://${e.get("host")}${e.url}`,t=new URL(a).searchParams,o={};for(const[e,s]of t.entries())o[e]=s;return 0===Object.keys(o).length?null:o}catch(e){return console.error(e),null}}()};if(console.log("[31mThis is a red log[39m"),console.log("[32mThis is a green log[39m"),console.log("[34mThis is a blue log[39m"),console.log(t.userDevice),null!==t.urlModes&&(t.urlModes.mode&&!VALID_MODES.includes(t.urlModes.mode)||t.urlModes.select&&!VALID_SELECTED.includes(t.urlModes.select)))return void s.redirect("/");t.navigatorLanguage=t.urlModes&&t.urlModes.lang?t.urlModes.lang:__NK__.langs.supported.includes(t.navigatorLanguage.substring(0,2))?t.navigatorLanguage.substring(0,2):"en",console.log(t.navigatorLanguage);const o=new Map([["lang",t.navigatorLanguage]]);let n=await readFileAsync(path.join(`${__PROJECT_DIR__}/public/manifest/manifest.${t.navigatorLanguage}.webmanifest`),"utf8");n=JSON.parse(n);const r={__META__:t,__SETTING_CONFIG__:o,__MANIFEST__:n},l={HEADER:await loadComponent("components/header",{...r})},c={HEAD:await loadComponent("document/head",{...l,...r}),BODY:await loadComponent("document/body",{...l,...r}),TEST:await loadComponent("test",{...l,...r},"pug")},i=await PagePrerender("layout",{...c,...r});s.send(i)}catch(e){console.error(e),s.status(500).send(e.message)}})),app.get("/wiki",(async(e,s)=>{try{s.send("Future WIKI Section")}catch(e){console.error(e),s.status(500).send(e.message)}}));const[PORT,HOST]=[3e3,"localhost"],server=app.listen(PORT,HOST,(()=>{console.log(`[35m[${(new Date).toLocaleString().replace(",","")}] :: üü™ > [SERVER] :: Runned server at [http://${HOST}:${PORT}][39m`)}));