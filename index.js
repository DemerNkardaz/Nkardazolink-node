require("dotenv").config(),require("./nk.config.js").config().init(),console.log(`[${(new Date).toLocaleString().replace(",","")}] :: üü™ > [SERVER] :: Server started`),app.use(compression()),app.use(express.static(path.join(__PROJECT_DIR__,"public"))),app.use(express.urlencoded({extended:!1})),app.use(cookieParser()),app.use(express.json()),app.set("view engine","ejs"),app.set("views",path.join(__PROJECT_DIR__,"app")),(async()=>{const e=dbHandle("./data_base/index.db");try{const s=await e.set("TestingTable","TestingKey","TestingValue");console.log(s);const t=await e.get("TestingTable","TestingKey");console.log(t);const a=await e.remove("TestingTable","TestingKey");console.log(a);const o=await e.get("TestingTable","TestingKey");console.log(o)}catch(e){console.error(e)}})(),app.use(((e,s,t)=>{if(e.url.endsWith(".css")){s.setHeader("Content-Type","text/css");const a=path.join(__dirname,"app","styles",e.url.replace(".css",".scss"));if(fs.existsSync(a)){const e=sass.compile(a,{style:"compressed"}),t=new Readable;t._read=()=>{},t.push(e.css),t.push(null),t.pipe(s)}else{const a=path.join(__dirname,"app","styles","skins",e.url.replace(".css",".scss"));if(fs.existsSync(a)){const e=spawn("node",["-e",`\n                    const sass = require('sass');\n                    const fs = require('fs');\n                    const scssFilePath = '${a}';\n                    const result = sass.compile(scssFilePath, { style: 'compressed' });\n                    process.stdout.write(result.css);\n                `]);e.stdout.on("data",(e=>{s.write(e)})),e.on("close",(e=>{s.end()})),e.stderr.on("data",(e=>{console.error(`–û—à–∏–±–∫–∞: ${e}`),s.status(500).send("–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ SCSS")}))}else t()}}else t()}));const dataArray=[];function generateUserId(e){const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let t="";for(let a=0;a<e;a++){const e=Math.floor(62*Math.random());t+=s.charAt(e)}return t}async function getLastModifiedInFolders(){try{const e=["./","./app","./public"],s=await Promise.all(e.map((async e=>{const s=await fs.promises.readdir(e),t=await Promise.all(s.map((async s=>{const t=path.join(e,s);return(await fs.promises.stat(t)).mtime})));return Math.max(...t)})));return Math.max(...s)}catch(e){throw console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",e),e}}__NK__.langs.supported.forEach((e=>{dataArray.push({source:`./public/data/locale/common/main.${e}.yaml`,as:`locale.${e}`})})),dataArray.push({source:"./public/data/locale/common/asset.common.yaml",as:"locale.common"}),dataArray.push({source:"./public/data/locale/common/asset.templates.yaml",as:"locale.templates"}),DataExtend(dataArray,__PROJECT_DIR__).then((()=>console.log(`[${(new Date).toLocaleString().replace(",","")}] :: üü© > [DATA-EXTEND] :: Extension of data completed`))).catch((e=>console.error(`[${(new Date).toLocaleString().replace(",","")}] :: üü© > [DATA-EXTEND] :: Error extending data: ${e.message}`))),app.use(((e,s,t)=>{s.setHeader("X-Content-Type-Options","nosniff"),s.setHeader("Content-Type","text/html; charset=utf-8"),t()})),app.get("/",(async(e,s)=>{try{console.log(new Date(await getLastModifiedInFolders()).toLocaleString());const t={};for(const s in e.cookies)for(const a of VALID_COOKIES)if(s.startsWith(a)){const a=s.split(".")[0],o=e.cookies[s];t[a]=t[a]||{},t[a][s.substring(a.length+1)]=o}console.log(t),console.log(e.headers["accept-language"]);const a={...t,request:e,userURL:e.url,fullURL:`${e.protocol}://${e.get("host")}${e.url}`,userDevice:os.platform(),navigatorLanguage:e.headers["accept-language"],urlModes:await async function parseUrl(){try{const s=e.protocol,t=`${s}://${e.get("host")}${e.url}`,a=new URL(t).searchParams,o={};for(const[e,s]of a.entries())o[e]=s;return 0===Object.keys(o).length?null:o}catch(e){return console.error(e),null}}()};if(console.log(a.userDevice),null!==a.urlModes&&(a.urlModes.mode&&!VALID_MODES.includes(a.urlModes.mode)||a.urlModes.select&&!VALID_SELECTED.includes(a.urlModes.select)))return void s.redirect("/");a.navigatorLanguage=a.urlModes&&a.urlModes.lang?a.urlModes.lang:__NK__.langs.supported.includes(a.navigatorLanguage.substring(0,2))?a.navigatorLanguage.substring(0,2):"en",console.log(a.navigatorLanguage);const o={__META__:a,__SETTING_CONFIG__:new Map([["lang",a.navigatorLanguage]])},n={HEADER:await loadComponent("components/header",{...o})},r={HEAD:await loadComponent("document/head",{...n,...o}),BODY:await loadComponent("document/body",{...n,...o}),TEST:await loadComponent("test",{...n,...o},"pug")},c=await PagePrerender("layout",{...r,...o});s.send(c)}catch(e){console.error(e),s.status(500).send(e.message)}})),app.get("/wiki",(async(e,s)=>{try{s.send("Future WIKI Section")}catch(e){console.error(e),s.status(500).send(e.message)}}));const[PORT,HOST]=[3e3,"localhost"],server=app.listen(PORT,HOST,(()=>{console.log(`[${(new Date).toLocaleString().replace(",","")}] :: üü™ > [SERVER] :: Runned server at [http://${HOST}:${PORT}]`)}));